import React, { useState, useEffect } from 'react';

// Chuy·ªÉn h√†m helper ra ngo√†i v√¨ n√≥ kh√¥ng ph·ª• thu·ªôc v√†o component
const formatNumber = number => String(number).padStart(2, '0');

const CountdownTimer = ({ targetDate }) => {
    // 1. Di chuy·ªÉn h√†m t√≠nh to√°n v√†o trong ƒë·ªÉ n√≥ c√≥ th·ªÉ truy c·∫≠p `targetDate`
    //    nh∆∞ng kh√¥ng c·∫ßn ƒë·ªãnh nghƒ©a l·∫°i n·∫øu kh√¥ng c·∫ßn thi·∫øt (useCallback c√≥ th·ªÉ d√πng ·ªü ƒë√¢y nh∆∞ng kh√¥ng b·∫Øt bu·ªôc)
    const calculateTimeLeft = () => {
        const difference = +new Date(targetDate) - +new Date();
        let timeLeft = {};

        if (difference > 0) {
            timeLeft = {
                days: Math.floor(difference / (1000 * 60 * 60 * 24)),
                hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
                minutes: Math.floor((difference / 1000 / 60) % 60),
                seconds: Math.floor((difference / 1000) % 60),
            };
        }
        return timeLeft;
    };

    // 2. D√πng lazy initial state ƒë·ªÉ h√†m ch·ªâ ch·∫°y 1 l·∫ßn l√∫c kh·ªüi t·∫°o
    const [timeLeft, setTimeLeft] = useState(() => calculateTimeLeft());

    // 3. D√πng useEffect v·ªõi dependency array v√† setInterval
    useEffect(() => {
        const intervalId = setInterval(() => {
            setTimeLeft(calculateTimeLeft());
        }, 1000);

        // H√†m d·ªçn d·∫πp
        return () => clearInterval(intervalId);
    }, [targetDate]); // Ch·∫°y l·∫°i effect n·∫øu targetDate thay ƒë·ªïi

    // 4. D√πng .map() ƒë·ªÉ render v√† x·ª≠ l√Ω tr∆∞·ªùng h·ª£p h·∫øt gi·ªù
    const timerComponents = Object.keys(timeLeft).map(interval => {
        return (
            <span key={interval}>
                {formatNumber(timeLeft[interval])} {interval}{' '}
            </span>
        );
    });

    return (
        <div>
            {timerComponents.length ? timerComponents : <span>H·∫øt gi·ªù! ü•≥</span>}
        </div>
    );
};

export default CountdownTimer;